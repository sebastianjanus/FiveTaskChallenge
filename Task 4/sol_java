public class MaximumDifference{
    public static void main(String []args){
       Integer[] w = { 3, -5, 1, -2, 8, -2, 3, -2, 1};
       System.out.println("Maximum SubSequence Difference:" + maxDiff(w));
    }

    public static int maxDiff(Integer[] v) {

       int max = 0;
       int winnerSubSequenceSize = 0;
       int winnerLeftSubStart = 0;
       int winnerRightSubStart = 0;

       // one-dimensional integral-image
       /*
        *  The solution presented here uses a technique introduced in 1984.
        *  Integral Images are widely used in computer vision for object detection (as part of the algorithm)
        *
        *  The main idea is to access the subsequent sums much faster i.e. via a look-up
       */

       Integer[] integralArray = new Integer[v.length + 1];
       integralArray[0] = 0;
       integralArray[1] = v[0];
       for(int integralIndex = 1; integralIndex < v.length; integralIndex++)
           integralArray[integralIndex] = integralArray[integralIndex - 1] + v[integralIndex];



       // incremental loop for the sub-size
        for(int subLength = 1; subLength < 2*v.length; subLength++)
        {
            for(int leftSlide = 0; leftSlide < v.length - 2*subLength; leftSlide++) {

               // sum the left-sub
               int leftSubSum = integralArray[leftSlide + subLength] - integralArray[leftSlide];

               for(int rightSlide = leftSlide + 1; rightSlide < v.length-subLength; rightSlide++) {

                   // sum the right-sub
                   int rightSubSum = integralArray[rightSlide + subLength] - integralArray[rightSlide];

                   if(Math.abs(rightSubSum-leftSubSum) > max) {

                       max = Math.abs(rightSubSum-leftSubSum);
                       winnerSubSequenceSize = subLength;
                       winnerLeftSubStart = leftSlide + 1;
                       winnerRightSubStart = rightSlide + 1;
                   }

               }

            } // end of slide loop

        }

       System.out.println("Subsequence Size: "+ winnerSubSequenceSize);
       System.out.print("Left subsequence: ");
       for(int i = 0; i < winnerSubSequenceSize; i++)
           System.out.print(v[winnerLeftSubStart + i] + "   ");
       System.out.println();

       System.out.print("Right subsequence: ");
       for(int i = 0; i < winnerSubSequenceSize; i++)
           System.out.print(v[winnerRightSubStart + i] + "   ");

       System.out.println();

       return max;

    } // end of method

} // end of class